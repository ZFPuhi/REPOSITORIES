import numpy as np

# Задача 1: Намерете обратната матрица на A
A = np.array([[4, 1, 4], [-2, -1, 2], [1, 1, 2]])
A_inv = np.linalg.inv(A)
print("Задача 1: Обратната матрица на A е:")
print(A_inv)

# Задача 2: Решете системата с метода на Гаус
# Системата на уравненията като матрица и вектор
coeff_matrix = np.array([[2, 1, -2], [4, -7, 3], [4, 2, 4]])
result_vector = np.array([4, 6, 8])

# Решаване на системата
solution = np.linalg.solve(coeff_matrix, result_vector)
print("\nЗадача 2: Решение на системата е:")
print(f"x1 = {solution[0]:.2f}, x2 = {solution[1]:.2f}, x3 = {solution[2]:.2f}")

# Задача 3: Намиране на уравнението на правата p
a1, a2 = 0, 2
c1, c2 = 2, 4

# Средата на отсечката AC
m_x = (a1 + c1) / 2
m_y = (a2 + c2) / 2
print(f"\nЗадача 3: Средата на отсечката AC е M({m_x}, {m_y})")

# Наклон на правата d
m_d = (c2 - a2) / (c1 - a1)

# Наклон на правата p, която е перпендикулярна на d
m_p = -1 / m_d

# Уравнение на правата p: y - m_y = m_p(x - m_x)
# Преработваме го до стандартен вид y = m_p * (x - m_x) + m_y
def line_equation(x):
    return m_p * (x - m_x) + m_y

print(f"\nЗадача 3: Уравнението на правата p е: y = {m_p:.2f} * (x - {m_x}) + {m_y}")
print(f"Което в опростен вид е: y = {-m_p:.2f}x + {m_y + m_p * m_x:.2f}")
